// Automatically generated by:
// ../../mechanisms/generate_catalogue -A arbor -I /Users/antonaf/arbor-ws/arbsimd/cmake-build-debug/mechanisms/generated/default -o /Users/antonaf/arbor-ws/arbsimd/cmake-build-debug/mechanisms/default_catalogue.cpp -B multicore -C default -N arb::default_catalogue exp2syn expsyn expsyn_stdp hh kamt kdrmt nax nernst pas gj

#include <arbor/mechcat.hpp>
#include <arbor/mechanism.hpp>
#include <arbor/mechanism_abi.h>

#include "/Users/antonaf/arbor-ws/arbsimd/cmake-build-debug/mechanisms/generated/default/exp2syn.hpp"
#include "/Users/antonaf/arbor-ws/arbsimd/cmake-build-debug/mechanisms/generated/default/expsyn.hpp"
#include "/Users/antonaf/arbor-ws/arbsimd/cmake-build-debug/mechanisms/generated/default/expsyn_stdp.hpp"
#include "/Users/antonaf/arbor-ws/arbsimd/cmake-build-debug/mechanisms/generated/default/hh.hpp"
#include "/Users/antonaf/arbor-ws/arbsimd/cmake-build-debug/mechanisms/generated/default/kamt.hpp"
#include "/Users/antonaf/arbor-ws/arbsimd/cmake-build-debug/mechanisms/generated/default/kdrmt.hpp"
#include "/Users/antonaf/arbor-ws/arbsimd/cmake-build-debug/mechanisms/generated/default/nax.hpp"
#include "/Users/antonaf/arbor-ws/arbsimd/cmake-build-debug/mechanisms/generated/default/nernst.hpp"
#include "/Users/antonaf/arbor-ws/arbsimd/cmake-build-debug/mechanisms/generated/default/pas.hpp"
#include "/Users/antonaf/arbor-ws/arbsimd/cmake-build-debug/mechanisms/generated/default/gj.hpp"

namespace arb {

mechanism_catalogue build_default_catalogue() {
    mechanism_catalogue cat;

    cat.add("exp2syn", make_arb_default_catalogue_exp2syn());
    cat.add("expsyn", make_arb_default_catalogue_expsyn());
    cat.add("expsyn_stdp", make_arb_default_catalogue_expsyn_stdp());
    cat.add("hh", make_arb_default_catalogue_hh());
    cat.add("kamt", make_arb_default_catalogue_kamt());
    cat.add("kdrmt", make_arb_default_catalogue_kdrmt());
    cat.add("nax", make_arb_default_catalogue_nax());
    cat.add("nernst", make_arb_default_catalogue_nernst());
    cat.add("pas", make_arb_default_catalogue_pas());
    cat.add("gj", make_arb_default_catalogue_gj());
    cat.register_implementation("exp2syn", std::make_unique<mechanism>(make_arb_default_catalogue_exp2syn(), *make_arb_default_catalogue_exp2syn_interface_multicore()));
    cat.register_implementation("expsyn", std::make_unique<mechanism>(make_arb_default_catalogue_expsyn(), *make_arb_default_catalogue_expsyn_interface_multicore()));
    cat.register_implementation("expsyn_stdp", std::make_unique<mechanism>(make_arb_default_catalogue_expsyn_stdp(), *make_arb_default_catalogue_expsyn_stdp_interface_multicore()));
    cat.register_implementation("hh", std::make_unique<mechanism>(make_arb_default_catalogue_hh(), *make_arb_default_catalogue_hh_interface_multicore()));
    cat.register_implementation("kamt", std::make_unique<mechanism>(make_arb_default_catalogue_kamt(), *make_arb_default_catalogue_kamt_interface_multicore()));
    cat.register_implementation("kdrmt", std::make_unique<mechanism>(make_arb_default_catalogue_kdrmt(), *make_arb_default_catalogue_kdrmt_interface_multicore()));
    cat.register_implementation("nax", std::make_unique<mechanism>(make_arb_default_catalogue_nax(), *make_arb_default_catalogue_nax_interface_multicore()));
    cat.register_implementation("nernst", std::make_unique<mechanism>(make_arb_default_catalogue_nernst(), *make_arb_default_catalogue_nernst_interface_multicore()));
    cat.register_implementation("pas", std::make_unique<mechanism>(make_arb_default_catalogue_pas(), *make_arb_default_catalogue_pas_interface_multicore()));
    cat.register_implementation("gj", std::make_unique<mechanism>(make_arb_default_catalogue_gj(), *make_arb_default_catalogue_gj_interface_multicore()));
    return cat;
}

const mechanism_catalogue& global_default_catalogue() {
    static mechanism_catalogue cat = build_default_catalogue();
    return cat;
}

} // namespace arb

#ifdef STANDALONE
extern "C" {
    [[gnu::visibility("default")]] const void* get_catalogue() {
        static auto cat = arb::build_default_catalogue();
        return (void*)&cat;
    }
}
#endif

